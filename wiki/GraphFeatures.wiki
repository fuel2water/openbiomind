This command combines results generated by several other OpenBiomind processes - mainly clustering-related dataset transformations and computation of useful features - in order to generate a graph that is a visualization of some relationships between the most useful features found in a metatask.

The syntax of this command is:

{{{
java task.GraphFeatures <-h horizontal dataset> <-m mobra dataset> <-u utility file> <-o output file> [-topNUseful nu] [-topNCooc max co-occurence edges] [-topNCoex max co-expression edges]
}}}

Due to its multi-integrative nature, unfortunately this command needs a lot of mandatory parameters. A brief explanation of each of them follows:

   * _-h_ specifies an _horizontal dataset_ like those produced by _ClusteringTransfomer_ . The horizontal dataset is used mainly for computation of co-expression among features.
   * _-m_ specifies a MOBRA dataset, and co-occurrence relations among features are directly extracted from this representation.
   * _-u_ specifies a file containing a list of useful features, as computed by _UtilityComputer_ .
   * _-o_ the output file, which is a code written in the Dot graph description language, and viewable using Graphviz.

All of the optional parameters are used to control the size/complexity of the output graph. Since graphs drawn in a plane quickly become completely incomprehensibl with even slight increases in complexity, those parameters have very low default values, as shown below:

   * _-topNUseful nu_ defines the number _nu_ of top useful features to be shown in the graph. The default value is 10. This sets a lower bound for the number of nodes to be shown. The actual number of nodes shown can be greather due to features that are not among the top useful required but are linked to them through co-occurrence or co-expression. (As defined by the remaining parameters.)
   * _-TopNCooc nc_ defines the "degree of co-occurrence" of a node included by _-topNUseful-_ . The default value is 1. Given a node representing a top _nu_ useful feature _f_, it will be connected to the features that have the top _nc_ highest values of co-occurrence with _f_ .
   *  _-TopNCoex nx_ defines the "degree of co-expression" of a node included by _-topNUseful-_ . The default value is 1. Given a node representing a top _nu_ useful feature _f_, it will be connected to the features that have the top _nx_ highest values of co-expression with _f_ .

The example below runs the command with the default optional values:

<verbatim>
openbiomind/classes $ java task.GraphFeatures -h outputs/pipelined/horizontal_dataset.txt -m outputs/pipelined/mobra_dataset.txt -u outputs/pipelined/featureUtility.txt -o outputs/graph.dot
Loading outputs/pipelined/featureUtility.txt
Loading outputs/pipelined/mobra_dataset.txt
Loading outputs/pipelined/horizontal_dataset.txt
openbiomind/classes $ head outputs/graph.dot 
graph G {
"Mrpl12" [
label = "{ Mrpl12 | mitochondrial ribosomal protein L12 | {50.0% | 1 | 5 | 5} }",
shape = "record"
];
"Slfn3" -- "Mrpl12" [label="20.0%"];
"Uqcrh" -- "Mrpl12" [label="0.9819627",style=dashed];
"Slfn3" [
label = "{ Slfn3 | schlafen 3///schlafen 4 | {20.0% | 2 | 7 | 7} }",
shape = "record"
openbiomind/classes $ 
</verbatim>

The usage example above includes a view of the first few lines of the output _.dot_ file in order to give a feeling of the Dot graph description language. As for the graph in its final, visual form generated by Graphviz, here it is:

<center>
<img src=%ATTACHURL%/graph.jpg width=800>
</center>

Each node in the graph above contains id and description of the feature in the first two lines and a vector of four numbers in the third line. The first number is the utility of feature, in percent of models using that feature in the metatask results. The second number is the utility rank of the feature. The third and fourth numbers are the ranks according to differentiation and SAM, respectively.

As for the edges, solid edges show co-occurrence (percent of models that use both connected features). Dashed edges show co-expression - that is, the degree of similarity between the expression of two features. That similarity is measured by the cosine metric. (The same one also available as one of the clustering metrics.)

-- Main.LucioSouza - 04 Oct 2007
